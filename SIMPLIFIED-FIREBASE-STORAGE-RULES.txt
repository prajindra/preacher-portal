rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Your existing activity-reports rules (keep as is)
    match /activity-reports/{userId}/{reportId}/{imageId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (
        request.auth.uid == userId ||
        firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role in ['admin', 'super_admin']
      );
      allow delete: if request.auth != null && (
        request.auth.uid == userId ||
        firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role in ['admin', 'super_admin']
      );
    }
    
    // Your existing profile-images rules (keep as is)
    match /profile-images/{userId}/{imageId} {
      allow read: if request.auth != null;
      allow write, delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Your existing gallery images rules (keep as is)
    match /gallery/{allPaths=**} {
      allow read: if true; // Public read access for homepage display
      allow write: if request.auth != null; // Authenticated users can upload
      allow delete: if request.auth != null; // Authenticated users can delete
    }
    
    // SIMPLIFIED: Resources rules - No Firestore dependency for basic operations
    match /resources/{allPaths=**} {
      allow read: if true; // Public read access for downloads
      allow write: if request.auth != null; // Any authenticated user can upload
      allow delete: if request.auth != null; // Any authenticated user can delete (we handle role checking in frontend)
    }
    
    // Keep your existing deny rule
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
