rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      // Allow all authenticated users to read user documents (needed for role checks)
      allow read: if request.auth != null;
      // Allow admins and super_admins to list all users
      allow list: if request.auth != null && (
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'super_admin']
      );
      // Allow users to write their own document OR super_admins to write any user
      allow write: if request.auth != null && (
        request.auth.uid == userId ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'super_admin'
      );
    }
    
    // Allow authenticated users to read all events and create new events
    match /events/{eventId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid != null;
      allow update: if request.auth != null;
      allow delete: if request.auth != null && (
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'super_admin']
      );
      allow delete: if request.auth != null && (
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'super_admin']
      );
    }
    
    // Allow users to manage event registrations
    match /eventRegistrations/{registrationId} {
      // Allow reading all registrations (needed for counting participants)
      allow read: if request.auth != null;
      // Allow creating registrations for yourself
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      // Allow updating your own registrations
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      // Allow deleting your own registrations (for unregistering)
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Allow authenticated users to read preaching categories and super admins to manage them
    match /preachingCategories/{categoryId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && (
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'super_admin'
      );
      allow update: if request.auth != null && (
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'super_admin'
      );
      allow delete: if request.auth != null && (
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'super_admin'
      );
    }
    
    // Allow users to manage their own activity reports and admins/super_admins to read all
    match /activityReports/{reportId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.createdBy;
      allow update: if request.auth != null && request.auth.uid == resource.data.createdBy;
      allow delete: if request.auth != null && request.auth.uid == resource.data.createdBy;
    }
    
    // Gallery images collection rules (your existing)
    match /galleryImages/{imageId} {
      // Allow public read access so images can display on homepage
      allow read: if true;
      
      // Allow authenticated users to upload images
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uploadedBy;
      
      // Allow users to update their own uploaded images
      allow update: if request.auth != null && request.auth.uid == resource.data.uploadedBy;
      
      // Allow users to delete their own images OR admins/super_admins to delete any
      allow delete: if request.auth != null && (
        request.auth.uid == resource.data.uploadedBy ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'super_admin']
      );
    }
    
    // NEW: Preaching resources collection rules - ADD THIS SECTION
    match /preachingResources/{resourceId} {
      // Allow public read access so anyone can download resources
      allow read: if true;
      
      // Allow authenticated users to upload resources (we handle role checking in frontend)
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uploadedBy;
      
      // Allow users to update their own uploaded resources
      allow update: if request.auth != null && request.auth.uid == resource.data.uploadedBy;
      
      // Allow users to delete their own resources OR admins/super_admins to delete any
      allow delete: if request.auth != null && (
        request.auth.uid == resource.data.uploadedBy ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'super_admin']
      );
    }
  }
}
